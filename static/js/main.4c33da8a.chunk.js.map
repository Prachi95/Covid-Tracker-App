{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.jsx","Components/Chart/Chart.jsx","api/index.js","Components/Dropdown/Dropdown.jsx","Images/headerImage.png","App.js","reportWebVitals.js","index.js","App.module.css","Components/Chart/Chart.module.css","Components/Dropdown/Dropdown.module.css"],"names":["module","exports","Cards","data","cases","recovered","deaths","updated","className","styles","container","Grid","spacing","justify","alignItems","item","component","Card","xs","md","cx","card","active","CardContent","Typography","color","variant","start","end","duration","separator","Date","toDateString","Chart","country","barChart","labels","datasets","label","backgroundColor","borderWidth","options","title","display","text","fontSize","legend","url","getAllData","a","fetch","response","json","responseJson","reqData","console","log","getCountryData","changedUrl","countryInfo","map","Dropdown","countryChangeHandler","useState","countryData","setCountryData","useEffect","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","value","index","App","state","event","target","setState","this","headerContainer","image","src","coronaImage","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c33da8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2XqFC\",\"card\":\"Cards_card__1ak5A\",\"active\":\"Cards_active__3_M63\",\"recovered\":\"Cards_recovered__1wTBM\",\"deaths\":\"Cards_deaths__1YvrA\"};","import React from 'react';\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nimport styles from './Cards.module.css';\n\n\nconst Cards = ({data : { cases, recovered, deaths, updated}}) => {\n\n    if(!cases) return '';\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.active)}>\n                    <CardContent>\n                        <Typography color='textSecondary' variant=\"subtitle1\">Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={cases} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(updated).toDateString()}</Typography>\n                       \n                        <Typography variant=\"body2\">Number of cases of COVID-19.</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                    <CardContent>\n                        <Typography color='textSecondary' variant=\"subtitle1\">Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={recovered} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(updated).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19.</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                    <CardContent>\n                        <Typography color='textSecondary' variant=\"subtitle1\">Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp start={0} end={deaths} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography color=\"textSecondary\">{new Date(updated).toDateString()}</Typography>\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19.</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n            \n        </div>\n    );\n}\n\nexport default Cards;","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { cases, recovered, deaths }, country }) => {\n    const barChart = (\n        cases ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        data: [cases, recovered, deaths],\n                        label: 'People',\n                        backgroundColor: [\n                            'rgb(122, 127, 243)',\n                            'rgb(186, 252, 165)',\n                            'rgb(245, 153, 145)'\n                        ],\n                        borderWidth: 0\n                          \n                    }]\n                }}\n                options={{\n                    title:{\n                      display:true,\n                      text:`${country} Reports`,\n                      fontSize:16\n                    },\n                    legend:{\n                      display:false,\n                    }\n                }}\n            />\n        ) : null\n    );\n\n    return (\n        <div className={styles.container}>\n            {barChart}\n        </div>\n        \n    );\n}\n\nexport default Chart;","\n\nconst url = 'https://disease.sh/v3/covid-19';\n\n//method to fetch worldwide data \nexport const getAllData = async () => {\n    try {\n        const response = await fetch(`${url}/all`);\n        const responseJson = await response.json();\n        const reqData = {\n            cases : responseJson.cases,\n            recovered : responseJson.recovered,\n            deaths: responseJson.deaths, \n            updated : responseJson.updated\n        }\n        return reqData;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n//method to fetch data on country level\nexport const getCountryData = async (country) => {\n    let changedUrl = `${url}/countries/`;\n    if(country) changedUrl = `${url}/countries/${country}`;\n    try { \n        const response = await fetch(changedUrl);\n        const responseJson = await response.json();\n        let reqData;\n        if(country) {\n            reqData = {\n                cases : responseJson.cases,\n                recovered : responseJson.recovered,\n                deaths: responseJson.deaths, \n                updated : responseJson.updated,\n                country : responseJson.country,\n                countryInfo : responseJson.countryInfo\n            }\n        } else {\n            reqData = responseJson.map((item) => {\n                return {\n                    cases : item.cases,\n                    recovered : item.recovered,\n                    deaths : item.deaths,\n                    updated : item.updated,\n                    country : item.country,\n                    countryInfo : item.countryInfo\n                }\n            })\n        }\n        return reqData;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { getCountryData } from '../../api';\nimport styles from './Dropdown.module.css';\n\n\nconst Dropdown = ({countryChangeHandler}) => {\n\n    const [countryData, setCountryData] = useState([]);\n\n    useEffect(() => {\n        const fetchCountries = async () => {\n            setCountryData(await getCountryData());\n        }\n        fetchCountries();\n    }, [setCountryData]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={countryChangeHandler}>\n                <option value='global'>Global</option>\n                {\n                    countryData ? \n                    countryData.map((item, index) => {\n                        return (\n                            <option key={index} value={item.country}>{item.country}</option>\n                        )\n                    }) : null\n                }\n            </NativeSelect>\n        </FormControl>\n    );\n}\n\nexport default Dropdown;","export default __webpack_public_path__ + \"static/media/headerImage.9e5d4fc7.png\";","import React from 'react';\nimport { Cards, Chart, Dropdown } from './Components';\nimport styles from './App.module.css';\nimport { getAllData, getCountryData } from './api';\nimport coronaImage from './Images/headerImage.png';\n\nclass App extends React.Component {\n\n  state = {\n    data : {},\n    country : 'Global'\n  }\n\n  async componentDidMount() {\n    const response = await getAllData();\n    this.setState({data : response})\n  }\n\n  countryChangeHandler = async (event) => {\n    if(event.target.value === 'global') {\n      const response = await getAllData();\n      this.setState({data : response, country: 'Global'});\n    } else {\n      const response = await getCountryData(event.target.value);\n      const data = {\n        cases : response.cases,\n        recovered : response.recovered,\n        deaths: response.deaths, \n        updated : response.updated\n      }\n      this.setState({data, country: event.target.value});\n    }\n  }\n\n  render() {\n    const {data, country} = this.state;\n    return (\n      <div className={styles.container}>\n        <div className={styles.headerContainer}>\n          <img className={styles.image} src={coronaImage} alt=\"Covid-19\"/>\n          <Dropdown countryChangeHandler={this.countryChangeHandler}/>\n        </div>\n        <Cards data={data}/>\n        <Chart data={data} country={country}/>     \n      </div>\n      \n    );\n  }\n  \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"headerContainer\":\"App_headerContainer__qCdWC\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2bxln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Dropdown_formControl__3dG4a\"};"],"sourceRoot":""}